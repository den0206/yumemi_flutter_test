// Mocks generated by Mockito 5.4.4 from annotations
// in yumemi_flutter_test/test/src/domain/annotations/local_data_source.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/material.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yumemi_flutter_test/src/domain/model/sort_type.dart' as _i4;
import 'package:yumemi_flutter_test/src/infrastructure/local_data_source/account_local_data_source.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AccountLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountLocalDataSource extends _i1.Mock
    implements _i2.AccountLocalDataSource {
  @override
  _i3.Future<_i4.SortType> saveSortType(_i4.SortType? sortType) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSortType,
          [sortType],
        ),
        returnValue: _i3.Future<_i4.SortType>.value(_i4.SortType.bestMatch),
        returnValueForMissingStub:
            _i3.Future<_i4.SortType>.value(_i4.SortType.bestMatch),
      ) as _i3.Future<_i4.SortType>);

  @override
  _i3.Future<_i4.SortType> loadSortType() => (super.noSuchMethod(
        Invocation.method(
          #loadSortType,
          [],
        ),
        returnValue: _i3.Future<_i4.SortType>.value(_i4.SortType.bestMatch),
        returnValueForMissingStub:
            _i3.Future<_i4.SortType>.value(_i4.SortType.bestMatch),
      ) as _i3.Future<_i4.SortType>);

  @override
  _i3.Future<bool> deleteSortType() => (super.noSuchMethod(
        Invocation.method(
          #deleteSortType,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> saveThemeMode(_i5.ThemeMode? themeMode) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveThemeMode,
          [themeMode],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i5.ThemeMode> loadThemeMode() => (super.noSuchMethod(
        Invocation.method(
          #loadThemeMode,
          [],
        ),
        returnValue: _i3.Future<_i5.ThemeMode>.value(_i5.ThemeMode.system),
        returnValueForMissingStub:
            _i3.Future<_i5.ThemeMode>.value(_i5.ThemeMode.system),
      ) as _i3.Future<_i5.ThemeMode>);

  @override
  _i3.Future<List<String>> saveQuery(String? query) => (super.noSuchMethod(
        Invocation.method(
          #saveQuery,
          [query],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<List<String>> loadQueries() => (super.noSuchMethod(
        Invocation.method(
          #loadQueries,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<List<String>> deleteQuery(String? query) => (super.noSuchMethod(
        Invocation.method(
          #deleteQuery,
          [query],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<bool> deleteAllQuery() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllQuery,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
